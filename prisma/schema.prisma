generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique(map: "email")
  emailVerified DateTime?
  image         String?
  role          Role       @default(BUYER)
  status        Status     @default(ACTIVE)
  brandId       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  accounts      Account[]
  auditLogs     AuditLog[]
  orders        Order[]
  sessions      Session[]
  brand         Brand?     @relation(fields: [brandId], references: [id])
  reviews       Review[]
  questions     Question[]
  wishlists     Wishlist[]
  carts         Cart[]

  @@index([email])
  @@index([status])
  @@index([brandId], map: "User_brandId_fkey")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique(map: "sessionToken")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Brand {
  id          String    @id @default(cuid())
  nameKo      String
  nameCn      String?
  slug        String    @unique(map: "slug")
  description String?   @db.Text
  logoUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  products    Product[]
  users       User[]

  @@index([slug])
  @@index([isActive])
}

model Product {
  id             String          @id @default(cuid())
  brandId        String
  sku            String          @unique(map: "sku")
  nameKo         String
  nameCn         String?
  descriptionKo  String?         @db.Text
  descriptionCn  String?         @db.Text
  categoryId     String?
  status         ProductStatus   @default(ACTIVE)
  basePrice      Decimal         @db.Decimal(10, 2)
  discountPrice  Decimal?        @db.Decimal(10, 2)
  discountRate   Int             @default(0)
  inventory      Int             @default(0)
  minOrderQty    Int             @default(10)
  thumbnailImage String?
  images         Json?
  options        Json?
  features       Json?
  material       String?
  careInstructions String?       @db.Text
  tags           Json?
  isNew          Boolean         @default(false)
  isBestSeller   Boolean         @default(false)
  soldCount      Int             @default(0)
  viewCount      Int             @default(0)
  rating         Decimal         @default(0) @db.Decimal(2, 1)
  reviewCount    Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  orderItems     OrderItem[]
  brand          Brand           @relation(fields: [brandId], references: [id])
  category       Category?       @relation(fields: [categoryId], references: [id])
  colors         ProductColor[]
  sizes          ProductSize[]
  bulkPricing    BulkPricing[]
  reviews        Review[]
  questions      Question[]
  wishlists      Wishlist[]
  cartItems      CartItem[]

  @@index([brandId])
  @@index([categoryId])
  @@index([status])
  @@index([sku])
  @@index([isNew])
  @@index([isBestSeller])
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique(map: "slug")
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  products  Product[]

  @@index([slug])
  @@index([parentId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique(map: "orderNumber") @default(cuid())
  userId          String
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  shippingAddress Json
  paymentMethod   String?
  paymentInfo     Json?
  memo            String?     @db.Text
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([orderNumber])
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  options   Json?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  entityType String?
  entityId   String?
  metadata   Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User?    @relation(fields: [userId], references: [id])

  @@index([userId, action])
  @@index([entityType, entityId])
  @@index([createdAt])
}

enum Role {
  MASTER_ADMIN
  BRAND_ADMIN
  BUYER
}

enum Status {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ProductStatus {
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  SHIPPED
  DELIVERED
  CANCELLED
}

model ProductColor {
  id         String   @id @default(cuid())
  productId  String
  name       String
  code       String
  available  Boolean  @default(true)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductSize {
  id         String   @id @default(cuid())
  productId  String
  name       String
  available  Boolean  @default(true)
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model BulkPricing {
  id           String   @id @default(cuid())
  productId    String
  minQuantity  Int
  maxQuantity  Int?
  pricePerUnit Decimal  @db.Decimal(10, 2)
  discountRate Int
  createdAt    DateTime @default(now())
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int
  title     String?
  content   String   @db.Text
  images    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Question {
  id        String    @id @default(cuid())
  productId String
  userId    String
  content   String    @db.Text
  answer    String?   @db.Text
  answeredAt DateTime?
  answeredBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id])

  @@index([productId])
  @@index([userId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  items     CartItem[]
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@unique([sessionId])
  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  colorId   String?
  sizeId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
}
